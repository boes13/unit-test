// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/boes13/unit-test/redis_with_mocking (interfaces: RedisConnI)

// Package redis_with_mocking is a generated GoMock package.
package redis_with_mocking

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisConnI is a mock of RedisConnI interface
type MockRedisConnI struct {
	ctrl     *gomock.Controller
	recorder *MockRedisConnIMockRecorder
}

// MockRedisConnIMockRecorder is the mock recorder for MockRedisConnI
type MockRedisConnIMockRecorder struct {
	mock *MockRedisConnI
}

// NewMockRedisConnI creates a new mock instance
func NewMockRedisConnI(ctrl *gomock.Controller) *MockRedisConnI {
	mock := &MockRedisConnI{ctrl: ctrl}
	mock.recorder = &MockRedisConnIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisConnI) EXPECT() *MockRedisConnIMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockRedisConnI) Do(arg0 string, arg1 ...interface{}) (interface{}, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockRedisConnIMockRecorder) Do(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockRedisConnI)(nil).Do), varargs...)
}
