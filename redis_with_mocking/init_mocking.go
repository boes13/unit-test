// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/boes13/unit-test/redis_with_mocking (interfaces: RedisI)

// Package main is a generated GoMock package.
package redis_with_mocking

import (
	redis "github.com/garyburd/redigo/redis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRedisI is a mock of RedisI interface
type MockRedisI struct {
	ctrl     *gomock.Controller
	recorder *MockRedisIMockRecorder
}

// MockRedisIMockRecorder is the mock recorder for MockRedisI
type MockRedisIMockRecorder struct {
	mock *MockRedisI
}

// NewMockRedisI creates a new mock instance
func NewMockRedisI(ctrl *gomock.Controller) *MockRedisI {
	mock := &MockRedisI{ctrl: ctrl}
	mock.recorder = &MockRedisIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRedisI) EXPECT() *MockRedisIMockRecorder {
	return m.recorder
}

// Dial mocks base method
func (m *MockRedisI) Dial(arg0, arg1 string, arg2 ...redis.DialOption) (redis.Conn, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Dial", varargs...)
	ret0, _ := ret[0].(redis.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Dial indicates an expected call of Dial
func (mr *MockRedisIMockRecorder) Dial(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dial", reflect.TypeOf((*MockRedisI)(nil).Dial), varargs...)
}
