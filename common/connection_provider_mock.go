// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/boes13/unit-test/common (interfaces: DataProviderI)

// Package common is a generated GoMock package.
package common

import (
	sql "database/sql"
	redis "github.com/garyburd/redigo/redis"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataProviderI is a mock of DataProviderI interface
type MockDataProviderI struct {
	ctrl     *gomock.Controller
	recorder *MockDataProviderIMockRecorder
}

// MockDataProviderIMockRecorder is the mock recorder for MockDataProviderI
type MockDataProviderIMockRecorder struct {
	mock *MockDataProviderI
}

// NewMockDataProviderI creates a new mock instance
func NewMockDataProviderI(ctrl *gomock.Controller) *MockDataProviderI {
	mock := &MockDataProviderI{ctrl: ctrl}
	mock.recorder = &MockDataProviderIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataProviderI) EXPECT() *MockDataProviderIMockRecorder {
	return m.recorder
}

// GetDBObject mocks base method
func (m *MockDataProviderI) GetDBObject() *sql.DB {
	ret := m.ctrl.Call(m, "GetDBObject")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// GetDBObject indicates an expected call of GetDBObject
func (mr *MockDataProviderIMockRecorder) GetDBObject() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBObject", reflect.TypeOf((*MockDataProviderI)(nil).GetDBObject))
}

// GetRedisConnection mocks base method
func (m *MockDataProviderI) GetRedisConnection() redis.Conn {
	ret := m.ctrl.Call(m, "GetRedisConnection")
	ret0, _ := ret[0].(redis.Conn)
	return ret0
}

// GetRedisConnection indicates an expected call of GetRedisConnection
func (mr *MockDataProviderIMockRecorder) GetRedisConnection() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRedisConnection", reflect.TypeOf((*MockDataProviderI)(nil).GetRedisConnection))
}
