// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/boes13/unit-test/common (interfaces: DBI)

// Package common is a generated GoMock package.
package common

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBI is a mock of DBI interface
type MockDBI struct {
	ctrl     *gomock.Controller
	recorder *MockDBIMockRecorder
}

// MockDBIMockRecorder is the mock recorder for MockDBI
type MockDBIMockRecorder struct {
	mock *MockDBI
}

// NewMockDBI creates a new mock instance
func NewMockDBI(ctrl *gomock.Controller) *MockDBI {
	mock := &MockDBI{ctrl: ctrl}
	mock.recorder = &MockDBIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBI) EXPECT() *MockDBIMockRecorder {
	return m.recorder
}

// QueryRow mocks base method
func (m *MockDBI) QueryRow(arg0 string, arg1 ...interface{}) *sql.Row {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow
func (mr *MockDBIMockRecorder) QueryRow(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockDBI)(nil).QueryRow), varargs...)
}
